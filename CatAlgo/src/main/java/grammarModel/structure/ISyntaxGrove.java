package grammarModel.structure;

import java.util.List;

import grammarModel.exceptions.GrammarModelException;

/**
 * ISyntaxGrove is a container of syntax trees, i.e. syntax branches whose name is the start element of
 * the context-free grammar at use.
 * @author Gael Tregouet
 *
 */
public interface ISyntaxGrove extends ISyntaxBranch {
	
	@Override
	List<ISyntacticStructure> getListOfComponents();
	
	@Override
	void markRedundancies();
	
	/**
	 * Provides each tree and tree component, sub component, etc., with a 'poset element ID'. 
	 * In order to make sure that two nodes with the same name and same derivation in the syntax tree aren't provided
	 * with different 'poset element ID', tree paths generated by every structure in the grove are first 
	 * collected and mapped with a unique ID. This map is then re-injected in the structure, so that every structure 
	 * receives an ID accordingly to the list of paths it is associated with. Since two nodes with the same name and 
	 * same derivation generate the same list of paths, this procedure guarantees that they also share the same 
	 * 'poset element ID', and refer subsequently to a unique poset element.     
	 * @throws GrammarModelException
	 */
	void setPosetElementID() throws GrammarModelException;

}
